class Bubbles{constructor(t,e){if(!isValidNoteString(t.toString()))throw new Error("lowestNote must be a Note instance");if(!isValidNoteString(e.toString()))throw new Error("highestNote must be a Note instance");this.lowestNote=t,this.highestNote=e}generateArpeggio(t){var[e,o,s]=[t.copy().addSemitones(4),t.copy().addSemitones(7),t.copy().addOctaves(1)],n=(e,t)=>t.map(t=>[e,t.toString()]),s=[...n("0:1",[t,e,o]),...makeSequentialNoteEvents([t,e,o,s,o,e,t],0,3),...n("2:4",[t,e,o])],n=new Tone.Part((t,e)=>{pianoSampler.triggerAttackRelease(e,"4n",t)},s);return n.loop=!1,n.humanize=!0,n}runExercise(){for(var t=[],e=this.lowestNote.copy(),o=this.highestNote.copy().addSemitones(-11).toString();e.toString()!==o;)t.push(this.generateArpeggio(e)),e.addSemitones(1);t.forEach((t,e)=>{t.start(3*e+":0"),t.stop(3*(e+1)+":1"),playingParts.push(t)}),Tone.Transport.bpm.value=150,Tone.Transport.start()}}class Exercise{constructor(t,e){this.bpm=t,this.scale=e,this.lowestOffset=0,this.highestOffset=0,this.duration=0,this.calculateScaleInfo()}calculateScaleInfo(){this.scale.forEach(t=>{t.forEach(t=>{this.lowestOffset=t<this.lowestOffset?t:this.lowestOffset,this.highestOffset=t>this.highestOffset?t:this.highestOffset})}),this.duration=this.scale.length}makeChordNotation(e,t){return t.map(t=>[e,t.toString()])}generateScale(o){const s=[];this.scale.forEach((t,e)=>{e+=1,e=beatNumberToCommonTimeNotation(e),t=t.map(t=>o.copy().addSemitones(t));0!=t.length&&s.push(...this.makeChordNotation(e,t))});var t=new Tone.Part((t,e)=>{pianoSampler.triggerAttackRelease(e,"4n",t)},s);return console.log(s),t.loop=!1,t.humanize=!0,t}playExercise(t,e,o=1){var s=e.toNumber()-t.toNumber();if(s<0)throw new Error("Lowest note must not be higher than the highest note.");if(s<this.highestOffset-this.lowestOffset)throw new Error("Cannot play the given scale within the given range.");if(0==o)throw new Error("semitoneIncrement must not be zero.");var n=e.copy().addSemitones(-this.highestOffset),r=t.copy().addSemitones(-this.lowestOffset),a=(0<o?r:n).copy();let i=1;for(;0<o?a.toNumber()<=n.toNumber():a.toNumber()>=r.toNumber();){var h=this.generateScale(a);h.start(beatNumberToCommonTimeNotation(i)),i+=this.duration,h.stop(beatNumberToCommonTimeNotation(i+1)),playingParts.push(h),a.addSemitones(o)}Tone.Transport.bpm.value=this.bpm,Tone.start(),Tone.Transport.start()}}const notesWithoutOctaves=["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"],isValidNoteString=t=>{var e=t.slice(0,t.length-1),t=t.slice(t.length-1);return!Number.isNaN(parseInt(t,10))&&!!notesWithoutOctaves.includes(e)};class Note{constructor(t){if(!isValidNoteString)throw new Error("Invalid note");this.noteWithoutOctave=t.slice(0,t.length-1),this.octave=Number.parseInt(t.slice(t.length-1))}toString(){return this.noteWithoutOctave+this.octave}toNumber(){var t=notesWithoutOctaves.indexOf(this.noteWithoutOctave);return 12*this.octave+t}addSemitones(t){var t=notesWithoutOctaves.indexOf(this.noteWithoutOctave)+t,e=t/12,e=Math.floor(e),t=(t%12+12)%12;return this.noteWithoutOctave=notesWithoutOctaves[t],this.octave=this.octave+e,this}addOctaves(t){if(Number.isNaN(Number.parseInt(t,10)))throw new Error("Invalid argument: octaves");return this.octave=this.octave+t,this}copy(){return new Note(this.toString())}}const beatNumberToCommonTimeNotation=t=>{return Math.floor((t-1)/4)+":"+(t%4==0?4:t%4)},makeSequentialNoteEvents=(t,e,o)=>{var s=[];let n=e,r=o;for(const a of t)s.push([n+":"+r,a.toString()]),4<++r&&(r=1,n++);return s},buildPiano=()=>{var t,e={};for(t of["C1","D#1","F#1","A1","C2","D#2","F#2","A2","C3","D#3","F#3","A3","C4","D#4","F#4","A4","C5","D#5","F#5","A5","C6","D#6","F#6","A6"])e[t]=t.replace("#","s")+".mp3";return new Tone.Sampler({urls:e,baseUrl:"https://tonejs.github.io/audio/salamander/",release:1}).toDestination()},sampler=new Tone.Sampler({urls:{C4:"C4.mp3","D#4":"Ds4.mp3","F#4":"Fs4.mp3",A4:"A4.mp3"},release:1,baseUrl:"https://tonejs.github.io/audio/salamander/"}).toDestination(),pianoSampler=buildPiano(),playingParts=[],stop=()=>{Tone.Transport.stop(),playingParts.forEach(t=>{t.dispose()})},bubbles=new Exercise(150,[[0,4,7],[],[0],[4],[7],[12],[7],[4],[0],[],[0,4,7]]),play=()=>{Tone.start(),stop();var t=new Note(document.getElementById("startingNote").value),e=new Note(document.getElementById("endingNote").value),o=parseInt(document.getElementById("bpm").value);if(Number.isNaN(o))throw new Error("bpm must be an integer.");var s=JSON.parse(document.getElementById("scale").value),o=new Exercise(o,s);t.toNumber()<e.toNumber()?o.playExercise(t,e,1):o.playExercise(e,t,-1)},initialise=()=>{for(var t=new Note("C1"),e=document.getElementById("startingNote"),o=document.getElementById("endingNote");"C7"!=t.toString();){var s=document.createElement("option");s.label=t.toString(),s.value=t.toString(),e.appendChild(s),o.appendChild(s.cloneNode()),t.addSemitones(1)}};initialise();
