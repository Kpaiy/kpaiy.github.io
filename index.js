const scaleToAbcNotation=(scale,rootNote)=>{let abcString="X:1\nL:1/4\n";scale.forEach(crotchetBeat=>{if(crotchetBeat.length===0){abcString=abcString+"z ";return}const chord=crotchetBeat.map(noteOffset=>rootNote.copy().addSemitones(noteOffset)).map(noteToAbcNotation).join("");abcString=`${abcString}[${chord}] `});abcString=abcString+" ||";return abcString};const noteToAbcNotation=note=>{let deltaOctave=4-note.octave;let abcNote=note.noteWithoutOctave.includes("#")?"^"+note.noteWithoutOctave.substring(0,1):note.noteWithoutOctave;while(deltaOctave<0){abcNote=abcNote+"'";deltaOctave+=1}while(deltaOctave>0){abcNote=abcNote+",";deltaOctave+-1}return abcNote};const renderScale=(scale,rootNote,containerElementId)=>{const container=document.getElementById(containerElementId);container.textContent="";const abcNotation=scaleToAbcNotation(scale,rootNote);window.ABCJS.renderAbc(containerElementId,abcNotation)};class Bubbles{constructor(lowestNote,highestNote){if(!isValidNoteString(lowestNote.toString()))throw new Error("lowestNote must be a Note instance");if(!isValidNoteString(highestNote.toString()))throw new Error("highestNote must be a Note instance");this.lowestNote=lowestNote;this.highestNote=highestNote}generateArpeggio(rootNote){const[third,fifth,octave]=[rootNote.copy().addSemitones(4),rootNote.copy().addSemitones(7),rootNote.copy().addOctaves(1)];const makeChord=(timeNotation,notes)=>notes.map(note=>[timeNotation,note.toString()]);const noteSequence=[...makeChord("0:1",[rootNote,third,fifth]),...makeSequentialNoteEvents([rootNote,third,fifth,octave,fifth,third,rootNote],0,3),...makeChord("2:4",[rootNote,third,fifth])];const part=new Tone.Part((time,note)=>{pianoSampler.triggerAttackRelease(note,"4n",time)},noteSequence);part.loop=false;part.humanize=true;return part}runExercise(){const parts=[];const currentNote=this.lowestNote.copy();const upperBound=this.highestNote.copy().addSemitones(-11).toString();while(currentNote.toString()!==upperBound){parts.push(this.generateArpeggio(currentNote));currentNote.addSemitones(1)}parts.forEach((part,index)=>{part.start(`${index*3}:0`);part.stop(`${(index+1)*3}:1`);playingParts.push(part)});Tone.Transport.bpm.value=150;Tone.Transport.start()}}class Exercise{constructor(bpm,scale){this.bpm=bpm;this.scale=scale;this.lowestOffset=0;this.highestOffset=0;this.duration=0;this.calculateScaleInfo()}calculateScaleInfo(){this.scale.forEach(groupOfSemitoneOffsets=>{groupOfSemitoneOffsets.forEach(semitoneOffset=>{this.lowestOffset=semitoneOffset<this.lowestOffset?semitoneOffset:this.lowestOffset;this.highestOffset=semitoneOffset>this.highestOffset?semitoneOffset:this.highestOffset})});this.duration=this.scale.length}makeChordNotation(timeNotation,notes){return notes.map(note=>[timeNotation,note.toString()])}generateScale(rootNote){const noteSequence=[];this.scale.forEach((chord,index)=>{const beatNumber=index+1;const timeNotation=beatNumberToCommonTimeNotation(beatNumber);const chordNotes=chord.map(semitoneOffset=>rootNote.copy().addSemitones(semitoneOffset));if(chordNotes.length==0){return}noteSequence.push(...this.makeChordNotation(timeNotation,chordNotes))});const part=new Tone.Part((time,note)=>{pianoSampler.triggerAttackRelease(note,"4n",time)},noteSequence);console.log(noteSequence);part.loop=false;part.humanize=true;return part}playExercise(notes,semitoneIncrement=1){let beatNumber=1;for(let i=0;i<notes.length-1;i++){let startingNote=notes[i];const endingNote=notes[i+1];if(i!==0){if(startingNote.toNumber()<endingNote.toNumber()){startingNote=startingNote.copy().addSemitones(semitoneIncrement)}else{startingNote=startingNote.copy().addSemitones(-semitoneIncrement)}}const lowestNote=startingNote.toNumber()<endingNote.toNumber()?startingNote:endingNote;const highestNote=startingNote.toNumber()<endingNote.toNumber()?endingNote:startingNote;const effectiveSemitoneIncrement=startingNote.toNumber()<endingNote.toNumber()?semitoneIncrement:-semitoneIncrement;beatNumber=this.playCheckpointRun(lowestNote,highestNote,effectiveSemitoneIncrement,beatNumber)}Tone.Transport.bpm.value=this.bpm;Tone.start();Tone.Transport.start()}playCheckpointRun(lowestNote,highestNote,semitoneIncrement,beatNumber){const givenRange=highestNote.toNumber()-lowestNote.toNumber();if(givenRange<0){throw new Error("Lowest note must not be higher than the highest note.")}const scaleRange=this.highestOffset-this.lowestOffset;if(givenRange<scaleRange){throw new Error("Cannot play the given scale within the given range.")}if(semitoneIncrement==0){throw new Error("semitoneIncrement must not be zero.")}const highestRootNote=highestNote.copy().addSemitones(-this.highestOffset);const lowestRootNote=lowestNote.copy().addSemitones(-this.lowestOffset);const currentNote=semitoneIncrement>0?lowestRootNote.copy():highestRootNote.copy();while(semitoneIncrement>0?currentNote.toNumber()<=highestRootNote.toNumber():currentNote.toNumber()>=lowestRootNote.toNumber()){const part=this.generateScale(currentNote);part.start(beatNumberToCommonTimeNotation(beatNumber));beatNumber+=this.duration;part.stop(beatNumberToCommonTimeNotation(beatNumber+1));playingParts.push(part);currentNote.addSemitones(semitoneIncrement)}return beatNumber}}const notesWithoutOctaves=["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"];const isValidNoteString=note=>{const noteWithoutOctave=note.slice(0,note.length-1);const octave=note.slice(note.length-1);if(Number.isNaN(parseInt(octave,10))){return false}if(!notesWithoutOctaves.includes(noteWithoutOctave)){return false}return true};class Note{constructor(noteString){if(!isValidNoteString)throw new Error("Invalid note");this.noteWithoutOctave=noteString.slice(0,noteString.length-1);this.octave=Number.parseInt(noteString.slice(noteString.length-1))}toString(){return this.noteWithoutOctave+this.octave}toNumber(){const noteIndex=notesWithoutOctaves.indexOf(this.noteWithoutOctave);return this.octave*12+noteIndex}addSemitones(semitones){const currentNoteIndex=notesWithoutOctaves.indexOf(this.noteWithoutOctave);let noteIndex=currentNoteIndex+semitones;let octaves=noteIndex/12;octaves=Math.floor(octaves);const newNote=(noteIndex%12+12)%12;this.noteWithoutOctave=notesWithoutOctaves[newNote];this.octave=this.octave+octaves;return this}addOctaves(octaves){if(Number.isNaN(Number.parseInt(octaves,10))){throw new Error("Invalid argument: octaves")}this.octave=this.octave+octaves;return this}copy(){return new Note(this.toString())}}const beatNumberToCommonTimeNotation=beatNumber=>{const barNumber=Math.floor((beatNumber-1)/4);const beatInBar=beatNumber%4==0?4:beatNumber%4;return`${barNumber}:${beatInBar}`};const makeSequentialNoteEvents=(notes,startingBar,startingBeat)=>{const noteEvents=[];let bar=startingBar;let beat=startingBeat;for(const note of notes){noteEvents.push([`${bar}:${beat}`,note.toString()]);beat++;if(beat>4){beat=1;bar++}}return noteEvents};const generateNoteStrings=(lowestNoteString,highestNoteString)=>{if(!isValidNoteString(lowestNoteString)){throw new Error("lowestNoteString must be a valid note string")}if(!isValidNoteString(highestNoteString)){throw new Error("highestNoteString must be a valid note string")}const currentNote=new Note(lowestNoteString);const highestNote=new Note(highestNoteString);if(currentNote.toNumber()>highestNote.toNumber()){throw new Error("lowestNoteString must be lower than highestNoteString")}if(currentNote.toNumber()==highestNote.toNumber()){return[currentNote.toString()]}const notes=[];while(currentNote.toNumber()<=highestNote.toNumber()){notes.push(currentNote.toString());currentNote.addSemitones(1)}return notes};const buildPiano=()=>{const baseUrl="https://tonejs.github.io/audio/salamander/";const urls={};let notesToGet=["C1","D#1","F#1","A1","C2","D#2","F#2","A2","C3","D#3","F#3","A3","C4","D#4","F#4","A4","C5","D#5","F#5","A5","C6","D#6","F#6","A6"];for(let noteString of notesToGet){urls[noteString]=`${noteString.replace("#","s")}.mp3`}return new Tone.Sampler({urls:urls,baseUrl:baseUrl,release:1}).toDestination()};const sampler=new Tone.Sampler({urls:{C4:"C4.mp3","D#4":"Ds4.mp3","F#4":"Fs4.mp3",A4:"A4.mp3"},release:1,baseUrl:"https://tonejs.github.io/audio/salamander/"}).toDestination();const pianoSampler=buildPiano();const playingParts=[];const stop=()=>{Tone.Transport.stop();playingParts.forEach(part=>{part.dispose()})};const exercises={};const play=()=>{Tone.start();stop();const notes=document.getElementById("checkpointManager").value;const bpm=parseInt(document.getElementById("bpm").value);if(Number.isNaN(bpm)){throw new Error("bpm must be an integer.")}const scale=JSON.parse(document.getElementById("scale").value);const exercise=new Exercise(bpm,scale);exercise.playExercise(notes,1)};const initialise=()=>{const majorArpeggio=new Exercise(155,[[0,4,7],[],[0],[4],[7],[12],[7],[4],[0],[],[0,4,7]]);const fifthToRoot=new Exercise(120,[[0,7],[],[7],[5],[4],[2],[0],[],[0,7]]);const rootFifthRoot=new Exercise(70,[[0,7],[],[0],[7],[0],[],[0,7]]);const doubleRootToFifthReturn=new Exercise(170,[[0,7],[],[0],[2],[4],[5],[7],[5],[4],[2],[0],[2],[4],[5],[7],[5],[4],[2],[0],[],[0,7]]);const eeOoEeOoEeOoEeOoEe=new Exercise(140,[[0,4,7],[],[0],[4],[2],[5],[4],[7],[5],[2],[0],[],[0,4,7]]);exercises["Major Arpeggio"]=majorArpeggio;exercises["Fifth to Root"]=fifthToRoot;exercises["Root Fifth Root"]=rootFifthRoot;exercises["Double Root to Fifth to Root"]=doubleRootToFifthReturn;exercises["I have no idea what to call this one"]=eeOoEeOoEeOoEeOoEe;const exerciseSelect=document.getElementById("exerciseSelect");Object.entries(exercises).forEach(([exerciseName,exercise])=>{const exerciseOption=document.createElement("option");exerciseOption.label=exerciseName;exerciseOption.value=exerciseName;exerciseSelect.appendChild(exerciseOption)});exerciseSelect.addEventListener("change",event=>{const bpmInput=document.getElementById("bpm");const scaleInput=document.getElementById("scale");const exerciseName=event.target.value;const exercise=exercises[exerciseName];bpmInput.value=exercise.bpm;scaleInput.value=JSON.stringify(exercise.scale);renderScale(exercise.scale,new Note("C4"),"scalePreview")});const scaleInput=document.getElementById("scale");scaleInput.addEventListener("keyup",event=>{try{renderScale(JSON.parse(event.target.value),new Note("C4"),"scalePreview")}catch{renderScale([],new Note("C4"),"scalePreview")}});try{renderScale(JSON.parse(scaleInput.value),new Note("C4"),"scalePreview")}catch{console.error("Could not render initial scale.")}const checkpointManager=document.createElement("checkpoint-manager");checkpointManager.id="checkpointManager";const checkpointManagerWrapper=document.getElementById("checkpointManagerWrapper");checkpointManagerWrapper.insertBefore(checkpointManager,checkpointManagerWrapper.firstChild)};window.addEventListener("DOMContentLoaded",()=>{initialise()});class CheckpointManager extends HTMLElement{constructor(){super();const shadow=this.attachShadow({mode:"open"});this.container=document.createElement("div");shadow.appendChild(this.container);const firstNote=document.createElement("checkpoint-note");firstNote.value=new Note("A2");const secondNote=document.createElement("checkpoint-note");secondNote.value=new Note("A3");this.container.appendChild(firstNote);this.container.appendChild(this.generateArrowSpan());this.container.appendChild(secondNote);this.removeButton=document.createElement("button");this.removeButton.textContent="-";this.removeButton.style.float="right";this.removeButton.style.width="1.5rem";this.removeButton.disabled=true;this.removeButton.onclick=()=>{const childNodes=this.container.childNodes;let lastNote=null;let lastArrow=null;for(const node of childNodes){if(node.localName==="checkpoint-note"){lastNote=node}if(node.localName==="span"){lastArrow=node}}lastNote.remove();lastArrow.remove();const notes=this.container.querySelectorAll("checkpoint-note");if(notes.length<=2){this.removeButton.disabled=true}};this.addButton=document.createElement("button");this.addButton.textContent="+";this.addButton.style.float="right";this.addButton.style.width="1.5rem";this.addButton.onclick=()=>{this.container.insertBefore(this.generateArrowSpan(),this.removeButton);const checkpointNote=document.createElement("checkpoint-note");checkpointNote.value=new Note("C3");this.container.insertBefore(checkpointNote,this.removeButton);this.removeButton.disabled=false};this.container.appendChild(this.addButton);this.container.appendChild(this.removeButton)}generateArrowSpan(){const arrowSpan=document.createElement("span");arrowSpan.textContent=" → ";return arrowSpan}get value(){const noteStrings=[];for(let node of this.container.childNodes){if(node.localName==="checkpoint-note"){noteStrings.push(node.value)}}return noteStrings}}customElements.define("checkpoint-manager",CheckpointManager);class CheckpointNote extends HTMLElement{constructor(){super();const shadow=this.attachShadow({mode:"open"});this.selectElement=document.createElement("select");shadow.appendChild(this.selectElement);const noteStrings=generateNoteStrings("C1","C7");for(let noteString of noteStrings){const option=document.createElement("option");option.label=noteString;option.value=noteString;this.selectElement.appendChild(option)}}set value(newNote){this.shadowRoot.firstChild.value=newNote.toString()}get value(){return this.selectElement.value?new Note(this.selectElement.value):undefined}}customElements.define("checkpoint-note",CheckpointNote);
